// Напишите функцию isEmpty, которая возвращает true, если у объекта нет свойств(у самого объекта, не у прототипов), иначе возвращает false.

// Напишите функцию isEmptyWithProtos, которая возвращает true, если у объекта и его прототипов(не включая Object.prototype) нет свойств, иначе возвращает false.

// Обрати внимание на то, что функция isEmptyWithProtos проверяет наличие свойств не только у самого объекта, но и у его прототипов. 
// Если создать пустой объект литерально (просто через фигурные скобки как в примере {}) то у такого объекта автоматически будет прототип Object. 
// Поэтому isEmptyWithProtos возвращает false для таких объектов.


const isEmpty = (obj: object): boolean => {
  for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
};

// Объявляем стрелочную функцию isEmpty, которая принимает объект (obj) и возвращает boolean.
  // Используем цикл for-in для перебора всех свойств объекта (включая свойства из прототипов)
    // Проверяем, является ли текущее свойство (key) собственным свойством объекта (а не унаследованным) с помощью метода hasOwnProperty. 
      // Если найдено хотя бы одно собственное свойство - возвращаем false.

  // Если собственных свойств не найдено, объект пуст. Возвращаем true.
//

const isEmptyWithProtos = (obj: object): boolean => {
  for (let key in obj) {
    if (key) {
      return false;
    }
  }
  return true;
};

// Объявляем стрелочную функцию isEmptyWithProtos, которая принимает объект (obj) и возвращает boolean.
  // Используем цикл for-in для перебора всех свойств объекта (включая свойства из прототипов).
    // Проверяем, существует ли текущее свойство (key). Если свойство существует (не важно, собственное или унаследованное), объект не пуст.
      // Если найдено хотя бы одно собственное свойство - возвращаем false.

  // Если свойств не найдено, объект пуст. Возвращаем true.
//

export { isEmpty, isEmptyWithProtos };

